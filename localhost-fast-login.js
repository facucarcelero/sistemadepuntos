// Sistema de login ULTRA R√ÅPIDO para localhost
console.log('‚ö° Cargando sistema de login ULTRA R√ÅPIDO para localhost...');

// Funci√≥n de login alternativa para localhost
window.fastLocalhostLogin = async function(email, password) {
    console.log('üöÄ === LOGIN ULTRA R√ÅPIDO PARA LOCALHOST ===');
    
    try {
        // Verificar que estamos en localhost
        if (!window.location.hostname.includes('localhost') && 
            !window.location.hostname.includes('127.0.0.1')) {
            console.log('‚ö†Ô∏è No est√°s en localhost, usando m√©todo normal');
            return null; // Usar m√©todo normal
        }
        
        console.log('üè† Detectado localhost, usando login ULTRA R√ÅPIDO...');
        
        // Verificar Firebase
        if (!firebase || !firebase.auth) {
            console.error('‚ùå Firebase no disponible');
            return null;
        }
        
        const auth = firebase.auth();
        const startTime = Date.now();
        
        console.log('üîß M√©todo 1: Login directo SIN timeout (modo desarrollo)...');
        
        // M√©todo 1: Login directo SIN timeout para desarrollo
        try {
            console.log('üîß M√©todo 1: Login directo SIN timeout para desarrollo...');
            const userCredential = await auth.signInWithEmailAndPassword(email, password);
            const user = userCredential.user;
            
            const time = Date.now() - startTime;
            console.log(`‚úÖ Login exitoso en ${time}ms con m√©todo directo (sin timeout)`);
            
            // En localhost, permitir login sin verificaci√≥n de email
            console.log('üè† Localhost: Permitido login sin verificaci√≥n de email');
            return { success: true, message: 'Inicio de sesi√≥n exitoso (modo desarrollo).' };
            
        } catch (error) {
            console.log('‚ö†Ô∏è M√©todo 1 fall√≥, intentando m√©todo alternativo...');
            
            // M√©todo 2: Usar credenciales
            try {
                console.log('üîß M√©todo 2: Usando credenciales con timeout de 10 segundos...');
                const credential = firebase.auth.EmailAuthProvider.credential(email, password);
                
                const loginPromise = auth.signInWithCredential(credential);
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout credenciales')), 10000)
                );
                
                const userCredential = await Promise.race([loginPromise, timeoutPromise]);
                const user = userCredential.user;
                
                const time = Date.now() - startTime;
                console.log(`‚úÖ Login exitoso en ${time}ms con credenciales`);
                
                // En localhost, permitir login sin verificaci√≥n de email
                console.log('üè† Localhost: Permitido login sin verificaci√≥n de email');
                return { success: true, message: 'Inicio de sesi√≥n exitoso (modo desarrollo).' };
                
            } catch (error2) {
                console.log('‚ö†Ô∏è M√©todo 2 fall√≥, intentando m√©todo de emergencia...');
                
                // M√©todo 3: Login sin verificaci√≥n de email (solo para desarrollo)
                try {
                    console.log('üîß M√©todo 3: Login de emergencia con timeout de 15 segundos...');
                    
                    // Forzar login sin verificaci√≥n de email
                    const loginPromise = auth.signInWithEmailAndPassword(email, password);
                    const timeoutPromise = new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('Timeout emergencia')), 15000)
                    );
                    
                    const userCredential = await Promise.race([loginPromise, timeoutPromise]);
                    const user = userCredential.user;
                    
                    const time = Date.now() - startTime;
                    console.log(`‚úÖ Login exitoso en ${time}ms con m√©todo de emergencia`);
                    
                    // En localhost, permitir login sin verificaci√≥n de email
                    console.log('üè† Localhost: Permitido login sin verificaci√≥n de email');
                    return { success: true, message: 'Inicio de sesi√≥n exitoso (modo desarrollo).' };
                    
                } catch (error3) {
                    console.log('‚ö†Ô∏è M√©todo 3 fall√≥, intentando m√©todo final...');
                    
                    // M√©todo 4: Estrategia de espera y reintento
                    try {
                        console.log('üîß M√©todo 4: Estrategia de espera y reintento...');
                        
                        // Esperar un poco y reintentar
                        await new Promise(resolve => setTimeout(resolve, 2000));
                        
                        const loginPromise = auth.signInWithEmailAndPassword(email, password);
                        const timeoutPromise = new Promise((_, reject) => 
                            setTimeout(() => reject(new Error('Timeout final')), 20000)
                        );
                        
                        const userCredential = await Promise.race([loginPromise, timeoutPromise]);
                        const user = userCredential.user;
                        
                        const time = Date.now() - startTime;
                        console.log(`‚úÖ Login exitoso en ${time}ms con m√©todo final`);
                        
                        // En localhost, permitir login sin verificaci√≥n de email
                        console.log('üè† Localhost: Permitido login sin verificaci√≥n de email');
                        return { success: true, message: 'Inicio de sesi√≥n exitoso (modo desarrollo).' };
                        
                    } catch (error4) {
                        console.error('‚ùå Todos los m√©todos fallaron:', error4);
                        return { success: false, message: 'Error: No se pudo iniciar sesi√≥n en localhost despu√©s de m√∫ltiples intentos.' };
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error en login ULTRA R√ÅPIDO:', error);
        return { success: false, message: 'Error interno en login r√°pido.' };
    }
};

// Funci√≥n para diagnosticar problemas de conectividad espec√≠ficos
window.diagnoseLocalhostConnectivity = async function() {
    console.log('üîç === DIAGN√ìSTICO ESPEC√çFICO DE LOCALHOST ===');
    
    const tests = [
        {
            name: 'Firebase Auth',
            test: () => firebase && firebase.auth ? '‚úÖ' : '‚ùå'
        },
        {
            name: 'Conectividad b√°sica',
            test: async () => {
                try {
                    const start = Date.now();
                    await fetch('https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js', {
                        method: 'HEAD',
                        mode: 'no-cors'
                    });
                    const time = Date.now() - start;
                    return `‚úÖ (${time}ms)`;
                } catch (error) {
                    return '‚ùå';
                }
            }
        },
        {
            name: 'Firebase Auth API',
            test: async () => {
                try {
                    const start = Date.now();
                    await fetch('https://identitytoolkit.googleapis.com/v1/projects/losnogales-reservas/accounts:signInWithPassword', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email: 'test@test.com', password: 'test' })
                    });
                    const time = Date.now() - start;
                    return `‚úÖ (${time}ms)`;
                } catch (error) {
                    return '‚ùå';
                }
            }
        }
    ];
    
    for (const test of tests) {
        const result = await test.test();
        console.log(`${test.name}: ${result}`);
    }
    
    console.log('üèÅ === FIN DEL DIAGN√ìSTICO ESPEC√çFICO ===');
};

console.log('‚úÖ Sistema de login ULTRA R√ÅPIDO para localhost cargado'); 